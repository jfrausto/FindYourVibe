{"version":3,"sources":["utils/API.js","components/pages/Collection.js","components/Navbar.js","components/LandingSplash.js","components/ButtonGroup.js","components/DropdownItems/Moods.js","components/DropdownMood.js","components/SongCard.js","components/SongCardContainer.js","utils/socketTest.js","components/BlurbInput.js","components/DashboardFeed.js","components/pages/Dashboard.js","components/UserPosts.js","components/pages/Profile.js","firebase.js","contexts/AuthContext.js","components/Signup.js","components/Login.js","components/PrivateRoute.js","App.js","registerServiceWorker.js","index.js"],"names":["lyricSnippet","axios","get","words","blurb","post","email","cardID","Collection","useState","UserCollection","setUserCollection","useEffect","API","then","res","data","songCollection","console","log","Container","className","fluid","Jumbotron","Row","map","collection","Col","xs","md","lg","xl","key","songId","Accordion","Card","Toggle","as","Header","eventKey","src","albumThumbnail","height","width","songArtistAlbum","Collapse","Body","lyrics","NavMenu","history","useHistory","Navbar","collapseOnSelect","expand","bg","variant","id","Brand","href","aria-controls","Nav","to","Button","onClick","push","error","LandingSplash","ButtonGroup","handleButtonClick","size","Moods","DropdownMood","vibeCheck","titleMood","setTitleMood","DropdownButton","drop","title","elem","Dropdown","Item","e","target","textContent","SongCard","songElement","handleSongSelect","count","songID","songObj","artist","name","wholeObj","thumbnail","SongCardContainer","songPool","song","span","offset","socket","io","connect","process","PORT","BlurbInput","currentVibe","setCurrentVibe","TextAreaVal","setTextAreaVal","SongPoolRes","setSongPoolRes","selectedSong","setSelectedSong","handleGeniusCall","geniusQueryArray","a","geniusRes","addCountPool","i","lyricSearchPrevent","cardOrTitle","choice","parentElement","classList","lyricsAreaId","parseInt","document","getElementById","cardHead","querySelectorAll","forEach","songCard","remove","add","lyricSearchRes","integerStringId","buttonPress","nounsRes","nounStringArray","newMongoModelUpdate","$push","blurbs","vibe","body","chosenSongArtist","newGlobalModel","userName","postRes","emit","window","location","replace","onChange","value","placeholder","countLimit","rows","DashboardFeed","globalPosts","allGlobalPosts","setAllGlobalPosts","_id","date","time","React","createElement","TimeAgo","Dashboard","setGlobalPosts","on","allData","UserPosts","UserBlurbs","setUserBlurbs","reverse","Profile","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","createContext","useAuth","useContext","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","onAuthStateChanged","user","login","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","Provider","Signup","emailRef","useRef","passwordRef","passwordConfirmRef","setError","preventDefault","current","Alert","Form","onSubmit","Group","Label","Control","type","ref","required","disabled","Login","PrivateRoute","Component","component","rest","render","props","App","exact","path","style","minHeight","maxWidth","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8f4227db.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// calls to Genius API, Wordnik API, and user database(eventually)\nexport default {\n    // getSongsPool takes in an array of strings\n    getSongsPool: function(lyricSnippet) {\n        return axios.get(\"/api/songs/\" + lyricSnippet);\n    },\n    getAllUsers: function() {\n        return axios.get(\"/api/users\");\n    },\n    // getNouns takes in a string\n    getNouns: function(words) {\n        return axios.get(\"/api/nouns/\" + words);\n    },\n    postBlurb: function(blurb) {\n        return axios.post(\"/api/postBlurb\", blurb);\n    },\n    postGlobalBlurb: function(blurb) {\n        return axios.post(\"/api/postGlobal\", blurb);\n    },\n    getAllGlobalPosts: function() {\n        return axios.get(\"/api/globalPosts\");\n    },\n    getUserPosts: function(email) {\n        return axios.get(\"/api/blurbs/\" + email);\n    },\n    getLyrics: function(cardID) {\n        return axios.get(\"/api/lyrics/\" + cardID);\n    }   \n};\n","import React, {useEffect, useState} from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport API from \"../../utils/API\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport \"../styles/SongCardContainer.css\";\n\n\nexport default function Collection() {\n\n const [UserCollection, setUserCollection] = useState([]);\n\n useEffect(() => {\n  // looks for the user based on their email,\n  // as of right now the email is hardcoded in\n  API.getUserPosts(\"connorjohn@gmail.com\").then( res => {\n   // ! THIS SHOULD FINISH THE CHECK FOR \"THIS USER HAS NO POSTS\" CASE\n   // if(res.data.blurbs === null){\n   //    return;\n   // }\n   setUserCollection(res.data.songCollection);\n   console.log(res.data.songCollection);\n })\n}, []);\n\n  return (\n    <>\n         <Container className=\"mt-3\" fluid>\n                <Jumbotron fluid>\n                    <h1 className=\"text-center\">Collections Page</h1>\n                    <p className=\"mt-4\">~~~m y   v i b e s~~~</p>\n                </Jumbotron> \n            </Container>\n        \n          <Container className=\"mt-2\">\n           <Row>\n          {\n           UserCollection.map(collection => {\n            return <Col xs={6} md={4} lg={3} xl={3} key={collection.songId}>\n            <Accordion className=\"rounded bottom MarginFix px-sm-3\" >\n            <Card className=\"cardBorder\">\n                <Accordion.Toggle as={Card.Header}  className=\"card-selector\" eventKey=\"0\">\n                    <img src={collection.albumThumbnail}height=\"100px\" width=\"100px\"/>   \n                    <h4 className=\"songTitle\">\n                        {collection.songArtistAlbum}\n                    </h4>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"0\">\n                <Card.Body> \n                 <h4>\n                  Lyrics\n                 </h4>\n                 <p className=\"songLyrics\">\n                 \n                 {collection.lyrics}\n                    </p></Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            </Accordion>\n            </Col>\n         })\n          }\n          </Row>\n       </Container>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button, Navbar, Nav } from \"react-bootstrap\";\n// import \"./styles/Navbar.css\";\nimport \"./styles/Navbar2.css\";\n\nfunction NavMenu() {\n  const history = useHistory();\n  function handleSignupButton() {\n    try {\n      history.push(\"/signup\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  function handleLoginButton() {\n    try {\n      history.push(\"/login\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      <Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        bg=\"dark\"\n        variant=\"dark\"\n        className=\"bunnies\"\n        id=\"navbar\"\n      >\n        <Navbar.Brand href=\"/\">\n          <i className=\"fab fa-forumbee\" />\n          ViBee\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          {/* <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#features\">Features</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n          </Nav> */}\n          <Nav className=\"ml-auto\">\n            <Link className=\"nav-items\" to=\"/\">\n              Home\n            </Link>\n            <Link className=\"nav-items\" to=\"/profile\">\n              Profile\n            </Link>\n            <Button onClick={handleSignupButton} className=\"btn--outline\">Sign Up</Button>{\" \"}\n            <Button onClick={handleLoginButton}className=\"btn--outline\">Log In</Button>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n\n// function Navbar() {\n//   const [click, setClick] = useState(false);\n//   const [button, setButton] = useState(false);\n\n//   const handleClick = () => setClick(!click);\n//   const closeMobileMenu = () => setClick(false);\n\n//   const showButton = () => {\n//     if (window.innerWidth <= 960) {\n//       setButton(false);\n//     } else {\n//       setButton(true);\n//     }\n//   };\n\n//   useEffect(() => {\n//     showButton();\n//   }, []);\n\n//   window.addEventListener(\"resize\", showButton);\n\n//   return (\n//     <>\n//       <nav className=\"navbar\">\n//         <div className=\"navbar-container\">\n//           <Link to=\"/\" className=\"navbar-logo\">\n//             <i className=\"fab fa-forumbee\" /> ViBee\n//           </Link>\n//           <div className=\"menu-icon\" onClick={handleClick}>\n//             <i className={click ? \"fas fa-times\" : \"fas fa-bars\"} />\n//           </div>\n//           <ul className={click ? \"nav-menu active\" : \"nav-menu\"}>\n//             <li className=\"nav-item\">\n//               <Link to=\"/\" className=\"nav-links\" onClick={closeMobileMenu}>\n//                 Home\n//               </Link>\n//             </li>\n//             <li className=\"nav-item\">\n//               <Link\n//                 to=\"/profile\"\n//                 className=\"nav-links\"\n//                 onClick={closeMobileMenu}\n//               >\n//                 Profile\n//               </Link>\n//             </li>\n//             <li>\n//               <Link\n//                 to=\"/signup\"\n//                 className=\"nav-links-mobile\"\n//                 onClick={closeMobileMenu}\n//               >\n//                 Sign Up\n//               </Link>\n//             </li>\n//             <li>\n//               <Link\n//                 to=\"/login\"\n//                 className=\"nav-links-mobile\"\n//                 onClick={closeMobileMenu}\n//               >\n//                 Log In\n//               </Link>\n//             </li>\n//           </ul>\n//           {button && (\n//             <Link to=\"/signup\" className=\"btn-mobile\">\n//               <button className=\"btn btn--outline\">Sign Up</button>\n//             </Link>\n//           )}\n//           {button && (\n//             <Link to=\"/login\" className=\"btn-mobile\">\n//               <button className=\"btn btn--outline\">Log In</button>\n//             </Link>\n//           )}\n//         </div>\n//       </nav>\n//     </>\n//   );\n// }\n\nexport default NavMenu;\n// export default Navbar;\n","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport './styles/LandingSplash.css';\n\n\nexport default function LandingSplash() {\n    return (\n        <>\n            <Container className=\"mt-3\" fluid>\n                <Jumbotron fluid>\n                    <h1 className=\"text-center\">viBee</h1>\n                    <p className=\"mt-4\">~~~ f i n d  your  v i b e ~~~</p>\n                </Jumbotron>\n            </Container>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\n// button group that is adjacent to drop down chooser\nexport default function ButtonGroup({handleButtonClick}) {\n  return (\n    <>\n      <Col>\n        <Button onClick={handleButtonClick} className=\"px-md-5\" size=\"sm\" variant=\"info\">Analyze</Button>\n      </Col>\n      <Col>\n        <Button onClick={handleButtonClick} className=\"px-md-5\" size=\"sm\" variant=\"dark\">Post</Button>\n      </Col>\n    </>\n  )\n}\n","const Moods = [\n  \"Lulz 🤣\",\n  \"Down 😢\",\n  \"Wavy 🏄‍♂️\",\n  \"Funky 🕺\",\n  \"Clowny 🤡\",\n  \"Magical 🧙‍♂️\",\n  \"Clairvoyant 🔮\",\n  \"Slumpy 🦥\",\n  \"Lovey-Dovey 💛\",\n  \"Popping Off 🖕\",\n  \"On One 🤪\",\n  \"Dead 💀\",\n  \"Chillin' 🥶\",\n  \"Meh 😑\",\n  \"Feelin' Good 😎\",\n  \"Flirty 🙊\",\n  \"Hating 💩\",\n  \"Hopeful 💭\",\n  \"Lit ✈\"\n];\n\nexport default Moods;","import React, { useEffect , useState} from 'react';\nimport Col from 'react-bootstrap/Col';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Moods from './DropdownItems/Moods';\n\nexport default function DropdownMood({vibeCheck}) {\n\n  // initialize the title of our dropdown menu to 'Vibe'\n  const [titleMood, setTitleMood] = useState(\"Vibe\");\n\n  return (\n    <>\n    {/* add a KEY prop for each child in a list <li>\n        in this case, the 'list' <li> is the Dropdown.Item */}\n      <Col>\n        <DropdownButton size=\"sm\" id=\"dropdown-item-button\" drop=\"up\" title={titleMood}>\n          {\n            Moods.map( elem => {\n              return <Dropdown.Item key={elem} as=\"button\">\n                        <div onClick={ (e) => { \n                          vibeCheck(e.target.textContent)\n                          setTitleMood(e.target.textContent)}}>\n                          {elem}\n                        </div>\n                      </Dropdown.Item>\n            })\n          }\n        </DropdownButton>\n      </Col>\n    </>\n  )\n}\n","import React from 'react';\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\n\n//song element takes in prop from songCardContainer\n//BlurbInput => SongCardContainer => SongCard\n//songElement is one of three songs from \n//the array\nexport default function SongCard({songElement, handleSongSelect}) {\n\n\n    return (\n        <div>\n             <Accordion className=\"rounded bottom MarginFix px-sm-3\">\n                    <Card className=\"cardBorder\">\n                        <Accordion.Toggle as={Card.Header} id={songElement.count} className=\"card-selector\" eventKey=\"0\" onClick={(e) => handleSongSelect(e, {\n                            songID: songElement.songObj.id,\n                            title: songElement.songObj.title,\n                            artist: songElement.songObj.artist.name,\n                            wholeObj: songElement.songObj\n                            // maybe grab the album and album art\n                        })}>\n                            <img src={songElement.songObj.thumbnail} height=\"100px\" width=\"100px\"/>   \n                            <h4 className=\"songTitle\">\n                                {songElement.songObj.title} - {songElement.songObj.artist.name}\n                            </h4>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body> <p className=\"songLyrics\" id={songElement.count+3}>\n                            LOADING...\n                            </p></Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                    </Accordion>\n        </div>\n    )\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\";\nimport SongCard from \"./SongCard\";\nimport \"./styles/SongCardContainer.css\";\n\n//songpool takes in prop from BlurbInput\n//it contains the array of songs from \n//the Genius API call\nexport default function SongCardContainer({songPool, handleSongSelect}) {\n\n    return (\n        <Container>\n            {\n            songPool.map(song => {\n                return <Row key={song.songObj.id} >\n                            <Col xs=\"12\" lg={{span: 10, offset: 1}} className=\"songCardCol my-auto\">\n                                <SongCard songElement={song} handleSongSelect={handleSongSelect}/>   \n                            </Col>\n                        </Row>\n            })  \n            } \n        </Container>  \n    )\n}","import io from 'socket.io-client';\n\n// connects only to local\nconst socket = io.connect(process.env.PORT || \"http://localhost:3000\");\n\n\nexport default socket;","import React, {useRef, useEffect, useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport TextareaCounter from 'react-textarea-counter';\nimport './styles/BlurbInput.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from './ButtonGroup';\nimport DropdownMood from './DropdownMood';\nimport API from '../utils/API';\nimport SongCardContainer from \"./SongCardContainer\";\n\n\n// socket\nimport socket from \"../utils/socketTest\";\n\n// input group component that allows user input\nexport default function BlurbInput() {\n\n    // current state of the value in text area\n    const [currentVibe, setCurrentVibe] = useState(\"\");\n    const [TextAreaVal, setTextAreaVal] = useState(\"\");\n    const [SongPoolRes, setSongPoolRes] = useState([]);\n    const [selectedSong, setSelectedSong] = useState({\n        songID: -1,\n        songArtistAlbum: \"\",\n        lyrics: \"\",\n        albumThumbnail: \"\"\n    });\n    useEffect(() => {\n        console.log(\"i selected a song\");\n        console.log(selectedSong);\n        // if (selectedSong.is)\n    }, [selectedSong]);\n\n    // should always take in an array of words ([geniusQueryArray])\n    // whether they be from Wordnik API\n    // or REGEX FUNCTIONS, OR a combination of both\n    const handleGeniusCall = async (geniusQueryArray) => {\n        \n        let geniusRes;\n        try {\n            geniusRes = await API.getSongsPool(geniusQueryArray);\n        } catch (err) {\n            throw err;\n        }\n        console.log(\"...inside handleGeniusCall front-end...\");\n        // these are the three songs to display now\n        // ? we could add song shuffling to get 3 new songs\n        // ? to keep it interesting everytime they hit analyze\n        if(typeof geniusRes.data === \"string\"){\n            console.log(\"Please provide words for genius\");\n            return;\n        }\n        console.log(geniusRes.data);\n\n        const addCountPool = [];\n        for (let i = 0; i < 3; i++) {\n            addCountPool.push(\n                {\n                    count: i+1,\n                    songObj: geniusRes.data[i]\n                }\n            );\n            \n        }\n        console.log(addCountPool);\n        // update song pool state\n        setSongPoolRes(addCountPool);\n    }\n\n    //  * LYRIC CHECK PREVENT\n    // CHECKS IF THIS SONG HAS RENDERED ITS LYRICS ALREADY\n    // selected element could be the card head or the title element\n    // since we can return them out of handling selectedSong....\n    // ...we need to setSelectedSong here too!\n    const lyricSearchPrevent = (cardOrTitle, choice) => {\n        // title case\n        if(cardOrTitle.parentElement.classList[0] === \"card-selector\") {\n            let lyricsAreaId = parseInt(cardOrTitle.parentElement.id) +3;\n            let lyricElement = document.getElementById(`${lyricsAreaId}`);\n            if(lyricElement.textContent === \"LOADING...\"){ \n                // lyrics NOT been requested yet, do not prevent search\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: \"LOADING...\",\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return false;\n            } else {\n                // lyrics have been requested, prevent search\n                // remember the lyrics\n                setSelectedSong({ \n                    ...selectedSong,\n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return true;\n            }\n        } else { // card head case\n            let lyricsAreaId = parseInt(cardOrTitle.id) +3;\n            let lyricElement = document.getElementById(`${lyricsAreaId}`);\n            if(lyricElement.textContent === \"LOADING...\"){ \n                // lyrics have NOT been requested yet, do not prevent search\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: \"LOADING...\",\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return false;\n            } else {\n                // lyrics have been requested, prevent search\n                setSelectedSong({\n                    ...selectedSong,\n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return true;\n            }\n        }\n    }\n\n    // handles state of the selected song\n    const handleSongSelect = async (e, choice) => {\n        const cardHead = e.target;\n        console.log(cardHead.id);\n        console.log(choice);\n        // cardHead grabs the clicked card\n        // allSongCards grabs all cards\n        const allSongCards = document.querySelectorAll(\".card-selector, .songTitle\");\n        // go through each card and remove green-bg class\n        allSongCards.forEach( (songCard) =>  \n            songCard.classList.remove(\"green-bg\")\n        )\n        // here SET the green-bg on the selected card\n        if( cardHead.parentElement.classList[0] === \"card-selector\"){\n            cardHead.parentElement.classList.add(\"green-bg\");\n        }\n        cardHead.classList.add(\"green-bg\");\n        console.log(choice);\n\n        // ! CHECK BEFORE FIRING API CALL\n        let shouldPrevent = lyricSearchPrevent(cardHead, choice);\n        if(shouldPrevent){\n            // leave the function\n            // prevents searching for lyrics\n            // if already done before\n            return;\n        }\n        let lyricSearchRes;\n        if(cardHead.parentElement.classList[0] === \"card-selector\" || true){\n            // ! THE JANK; THIS NEEDS TO BE REFACTORED FOR THE IF CASES, COULD BE A LOT CLEANER\n            // ! JANKING AROUND WITH THE ID's OF ELEMENTS\n            // TODO: -------------------------------------------------\n            // TODO: WE NEED TO NOT FIRE AN API CALL EVERYTIME THEY SELECT THE CARD HEADER\n            // ! THIS WILL PUT A HUGE STRES ON OUR APP\n            if(cardHead.parentElement.classList[0] === \"card-selector\" ){\n                try {\n                    lyricSearchRes = await API.getLyrics(cardHead.parentElement.id);\n                } catch (error) {\n                    throw error;\n                }\n                console.log(\"we are back in blurb Input - if \");\n                console.log(lyricSearchRes.data);\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: lyricSearchRes.data,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                let integerStringId = parseInt(cardHead.parentElement.id);\n                console.log(integerStringId);\n                integerStringId = integerStringId + 3;\n                let pTag = document.getElementById(`${integerStringId}`);\n                pTag.textContent = lyricSearchRes.data;\n            } else {\n                try {\n                    lyricSearchRes = await API.getLyrics(cardHead.id);\n                } catch (error) {\n                    throw error;\n                }\n                console.log(\"we are back in blurb Input - else\");\n                console.log(lyricSearchRes);\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: lyricSearchRes.data,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                let integerStringId = parseInt(cardHead.id);\n                console.log(integerStringId);\n                integerStringId = integerStringId + 3;\n                let pTag = document.getElementById(`${integerStringId}`);\n                pTag.textContent = lyricSearchRes.data;\n            }\n            \n        }\n\n    }\n\n    // takes in both actions from the POST and ANALYZE buttons\n    const handleButtonClick = async (e) => {\n        const buttonPress = e.target.textContent;\n        // do not call the api on an empty string\n        if (TextAreaVal === \"\") return;\n        // if we hit analyze, query genius API with\n        // extracted nouns from the text area\n        if(buttonPress === \"Analyze\"){\n            let nounsRes;\n            try {\n                nounsRes = await API.getNouns(TextAreaVal);\n            } catch(err) {\n                throw err;\n            }\n            const nounStringArray = nounsRes.data;\n            // before you execute!!!\n            // RESET THE LYRICS SECTION TO 'LOADING...'\n            let lyricsClass = document.querySelectorAll(\".songLyrics\");\n            lyricsClass.forEach( (elem) => {\n                elem.textContent = \"LOADING...\";\n            });\n            handleGeniusCall(nounStringArray);\n        } else { // we will submit the post!\n            console.log(\"post button click!\");\n            // console.log(\"TIME TO CHECK THE VIBE UNDER MEEEEE\");\n            const newMongoModelUpdate = {\n                $push: {\n                    blurbs: {\n                        vibe: currentVibe === \"\"?\"🤐\": currentVibe,\n                        body: TextAreaVal,\n                        chosenSongArtist: selectedSong.songArtistAlbum,\n                        thumbnail: selectedSong.albumThumbnail\n                    },\n                    songCollection: {\n                        songId: selectedSong.songID,\n                        songArtistAlbum: selectedSong.songArtistAlbum,\n                        lyrics: selectedSong.lyrics,\n                        albumThumbnail: selectedSong.albumThumbnail\n                    }\n                }\n            }\n            const newGlobalModel = {\n                // write in data that matches our new model\n                userName: \"hastaLaVista\",\n                vibe: currentVibe === \"\"?\"🤐\": currentVibe,\n                body: TextAreaVal,\n                chosenSongArtist: selectedSong.songArtistAlbum,\n                thumbnail: selectedSong.albumThumbnail,\n            }\n            let postRes;\n            try {\n                postRes = await API.postBlurb(newMongoModelUpdate);\n            } catch (error) {\n                throw error;\n            }\n            let globalPostRes;\n            try {\n                globalPostRes = await API.postGlobalBlurb(newGlobalModel);\n            } catch (error) {\n                throw error;\n            }\n            console.log(\"oh no\");\n            // EMIT SOCKET EVENT THAT WE POSTED A NEW BLURB\n            socket.emit(\"new blurb post\", \"whoa! you heard me!\");\n            console.log(\"WAITING FOR THIS LOG UNDER ME\")\n            console.log(postRes);\n            window.location.replace(\"./profile\");\n            // TODO: trigger UI to show all my posts page\n        }\n    }\n    //** This handles the dropdown menu not the state\n    const vibeCheck = (vibe) => {\n        setCurrentVibe(vibe);\n    }\n\n    return (\n    <>\n        <Container className=\"mt-5\">\n            <Row>\n                <Col>\n                <SongCardContainer songPool={SongPoolRes} handleSongSelect={handleSongSelect}/>\n                </Col>\n            </Row>\n            <Row className=\"mt-2\">\n                    <Col xs={12} md={{span: 8, offset: 2}}>\n                        <TextareaCounter onChange={(e) => setTextAreaVal(e.target.value)} placeholder=\"What's on your mind?\" countLimit={140} rows={3} />\n                    </Col>\n                </Row>\n                <Row className=\"mt-2\">\n                    <ButtonGroup handleButtonClick={handleButtonClick}/>\n                    <DropdownMood vibeCheck={vibeCheck}/>\n\n                </Row>\n            </Container>\n        </>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport TimeAgo from 'react-timeago';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./styles/UserPosts.css\";\n\n// VERY SIMILAR TO USERPOSTS.JS\n// with a username display field in this one though\nexport default function DashboardFeed({globalPosts}) {\n\n  const [allGlobalPosts, setAllGlobalPosts] = useState([]);\n  useEffect(() => {\n    \n    setAllGlobalPosts(globalPosts);\n    // listen to changes in this prop\n  }, [globalPosts])\n\n  const handleDateFormat = (date) => {\n    let format = React.createElement(TimeAgo, {date: date});\n    return format;\n }\n\n  return (\n    <div className=\"mt-2\">\n      {\n        allGlobalPosts.map( blurb => {\n          return <Container className=\"postDivContainerBackground mb-2 p-2\"  key={blurb._id}>\n          <Row>\n            <Col xs={4}>\n              <p>~<span className=\"user-name\">{blurb.userName}</span></p>\n            </Col>\n          </Row>\n          <Row>\n          <Col className=\"postColColor my-auto\" xs={2} lg={{span: 2, offset: 3}} >\n          <img className=\"postSongImage\" \n          //!!Need to change with the thumbnail from the users blurb\n          src={blurb.thumbnail} \n          height=\"50px\" \n          width=\"50px\"/>\n          </Col>\n          {/* styling can be changed using UserPosts.css file sheet \n          currently it was just to differentiate how the columns looked\n          and where the data was being created at!!!*/}\n          <Col xs={10} lg={4} className=\"postColColor my-auto\" >\n             <span className=\"postSongTitle\">\n             {blurb.chosenSongArtist}\n             </span>\n          </Col>\n       \n          </Row>\n          <Row >\n           <Col xs={12} lg={{span: 6, offset: 3}} className=\"postColColor my-auto\" >\n            <p className=\"postBlurb\">\n            {blurb.body}\n            </p>\n           </Col>\n          </Row>\n          <Row className=\"postFooter\" >\n          <Col xs={8} lg={{span:3, offset: 3 }} className=\"postColColor my-auto\">\n             <p className=\"postDate\">\n              {handleDateFormat(blurb.time)}\n             </p>\n          </Col>\n           <Col xs={4} lg={3} className=\"postColColor my-auto\">\n           <p>Vibe: <span className=\"postVibeEmoji\">\n            {blurb.vibe}\n           </span></p>\n           </Col>\n          </Row>\n           </Container>  \n         })\n      }\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\nimport \"../../App.css\";\nimport LandingSplash from \"../LandingSplash\";\nimport BlurbInput from \"../BlurbInput\";\nimport Container from \"react-bootstrap/Container\";\nimport DashboardFeed from \"../DashboardFeed\";\nimport socket from \"../../utils/socketTest\";\n\nexport default function Dashboard() {\n  const [globalPosts, setGlobalPosts] = useState([]);\n  useEffect(() => {\n    // getting all users and their posts\n    API.getAllGlobalPosts().then((res) => {\n      console.log(\"...got public posts from DB...!!!\");\n      console.log(res.data);\n      setGlobalPosts(res.data);\n    });\n    // add SOCKET event listener upon mounting this component\n    socket.on(\"updating posts\", (allData) => {\n      console.log(\"we got the update over here!!\");\n      console.log(allData);\n      setGlobalPosts(allData);\n    })\n  }, []);\n\n  return (\n    <div>\n      <Container>\n        <LandingSplash />\n        <BlurbInput />\n        <DashboardFeed globalPosts={globalPosts}/>\n      </Container>\n    </div>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport TimeAgo from 'react-timeago';\nimport Container from \"react-bootstrap/Container\";\nimport API from \"../utils/API\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./styles/UserPosts.css\";\n\nexport default function UserPosts() {\n\n const [UserBlurbs, setUserBlurbs] = useState([]);\n useEffect(() => {\n  // looks for the user based on their email,\n  // as of right now the email is hardcoded in\n  API.getUserPosts(\"connorjohn@gmail.com\").then( res => {\n   // ! THIS SHOULD FINISH THE CHECK FOR \"THIS USER HAS NO POSTS\" CASE\n   // if(res.data.blurbs === null){\n   //    return;\n   // }\n   setUserBlurbs(res.data.blurbs);\n   console.log(`${res.data.blurbs} is the data passed into setUserBlurbs`);\n })\n}, []);\n\n// Changes the date to show how much time has passed from today \n// ex. 5 minutes ago. The package will change from hour to days \n//automatically if there is syntax issue the default can be \n//changed. \nconst handleDateFormat = (date) => {\n   let format = React.createElement(TimeAgo, {date: date});\n   return format;\n}\n return (\n     <div className=\"mt-2\">\n     {\n        //!! .reverse() returns a reference of userBlurbsArray \n      UserBlurbs.reverse().map(blurb => {\n       return <Container className=\"postDivContainerBackground mb-2 p-2\"  key={blurb._id}>\n       <Row>\n       <Col className=\"postColColor my-auto\" xs={2} lg={{span: 2, offset: 3}} >\n       <img className=\"postSongImage\" \n       //!!Need to change with the thumbnail from the users blurb\n       src={blurb.thumbnail} \n       height=\"50px\" \n       width=\"50px\"/>\n       </Col>\n       <Col xs={10} lg={4} className=\"postColColor my-auto\" >\n          <span className=\"postSongTitle\">\n          {blurb.chosenSongArtist}\n          </span>\n       </Col>\n    \n       </Row>\n       <Row >\n        <Col xs={12} lg={{span: 6, offset: 3}} className=\"postColColor my-auto\" >\n         <p className=\"postBlurb\">\n         {blurb.body}\n         </p>\n        </Col>\n       </Row>\n       <Row className=\"postFooter\" >\n       <Col xs={8} lg={{span:3, offset: 3 }} className=\"postColColor my-auto\">\n          <p className=\"postDate\">\n           {handleDateFormat(blurb.time)}\n          </p>\n       </Col>\n        <Col xs={4} lg={3} className=\"postColColor my-auto\">\n        <p>Vibe: <span className=\"postVibeEmoji\">\n         {blurb.vibe}\n        </span></p>\n        </Col>\n       </Row>\n        </Container>  \n      })\n     }\n     </div>    \n )\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport API from \"../../utils/API\";\nimport \"../../App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport LandingSplash from \"../LandingSplash\";\nimport UserPosts from \"../UserPosts\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function Profile() {\n  return (\n    <div>     \n      <Container>\n      <Link to=\"/collection\" >\n      <Button variant=\"danger\">My Collections</Button>\n      </Link>\n      <LandingSplash />\n        <UserPosts />\n      </Container>\n    </div>\n  );\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nexport const auth = app.auth();\nexport default app;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setLoading(false);\n      setCurrentUser(user);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n  };\n\n  return (\n    <>\n      <AuthContext.Provider value={value}>\n        {!loading && children}\n      </AuthContext.Provider>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value);\n      //This will redirect to dashboard through \"/\" route\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to create an account\");\n    }\n\n    setLoading(false);\n  }\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordConfirmRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Sign Up\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Already have an account? <Link to=\"/login\">Log In</Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to log in\");\n    }\n\n    setLoading(false);\n  }\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Log In</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n// brackets are wrapper for current route\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n  console.log({currentUser})\n  if (currentUser) { console.log(currentUser.email) }\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        // return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\n        return true ? <Component {...props} /> : <Redirect to=\"/login\" />\n      }}\n    ></Route>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// socket instance!\n// in its own component\n// import socket from \"./utils/socketTest\";\n\nimport Collection from \"./components/pages/Collection\";\nimport Navbar from \"./components/Navbar\";\nimport Dashboard from \"./components/pages/Dashboard\";\nimport Profile from \"./components/pages/Profile\";\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport { Container } from \"react-bootstrap\";\nimport { useAuth, AuthProvider } from \"./contexts/AuthContext\";\n// import useNounFinder from \"./utils/Hooks/NounFinderFolder/NounFinder\";\n\nfunction App() {\n  // const [error, setError ] = useState(\"\")\n  // const { currentUser, logout } = useAuth()\n  // const history = useHistory()\n  // \n\n  return (\n    <div className=\"App\">\n      {/* Navigation  or other stuff can go here */}\n        <Router>\n          <Navbar />\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/\" component={Dashboard} />\n              <PrivateRoute path=\"/profile\" component={Profile} />\n              <PrivateRoute path=\"/collection\" component={Collection}/>\n              \n              <Container\n                className=\"d-flex align-items-center justify-content-center\"\n                style={{ minHeight: \"100vh\" }}\n              >\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n                  <Route path=\"/signup\" component={Signup} />\n                  <Route path=\"/login\" component={Login} />\n                </div>\n              </Container>\n\n            </Switch>\n          </AuthProvider>\n        </Router>\n        {/* we might not even want this landing splash thing in the future */}\n        {/* perhaps some buttons to continue */}\n    </div>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}