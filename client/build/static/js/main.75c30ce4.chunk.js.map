{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/Header.js","components/pages/Homepage.js","components/Navbar.js","components/Steps.js","components/pages/About.js","utils/API.js","components/pages/Collection.js","components/ButtonGroup.js","components/DropdownItems/Moods.js","components/DropdownMood.js","components/SongCard.js","components/SongCardContainer.js","components/PostToastError.js","utils/socketTest.js","components/BlurbInput.js","components/DashboardFeed.js","components/pages/Dashboard.js","components/UserPosts.js","components/ProfileDetails.js","components/pages/Profile.js","components/Signup.js","components/Login.js","components/PrivateRoute.js","App.js","registerServiceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","username","createUserWithEmailAndPassword","logout","signOut","Provider","Header","startLink","setStartLink","className","to","src","alt","Homepage","NavMenu","history","useHistory","a","push","console","log","Navbar","bg","variant","id","expand","Brand","as","Link","Toggle","aria-controls","Collapse","Nav","Button","onClick","error","width","height","viewBox","fill","xmlns","fillRule","d","Steps","slides","document","getElementsByClassName","current","querySelector","classList","remove","previousElementSibling","add","length","setTimeout","nextElementSibling","About","lyricSnippet","axios","get","words","post","blurb","cardID","Collection","UserCollection","setUserCollection","API","then","res","data","key","removedDups","songCollection","it","songId","Map","map","x","values","Container","fluid","Jumbotron","Row","noGutters","collection","Col","xs","md","lg","xl","Accordion","Card","eventKey","albumThumbnail","songArtistAlbum","Body","lyrics","ButtonGroup","handleButtonClick","isThinking","span","disabled","size","Spinner","animation","role","aria-hidden","Moods","DropdownMood","vibeCheck","titleMood","setTitleMood","DropdownButton","drop","title","elem","Dropdown","Item","e","target","textContent","SongCard","songElement","handleSongSelect","count","songID","songObj","artist","name","wholeObj","thumbnail","SongCardContainer","songPool","song","offset","PostToastError","showToast","show","setShow","Toast","onClose","delay","autohide","socket","io","BlurbInput","currentVibe","setCurrentVibe","TextAreaVal","setTextAreaVal","SongPoolRes","setSongPoolRes","selectedSong","setSelectedSong","setIsThinking","setShowToast","searchedWords","search","JSON","stringify","split","toString","toLowerCase","input","matches","word","indexOf","join","handleGeniusCall","geniusQueryArray","geniusRes","addCountPool","i","lyricSearchPrevent","cardOrTitle","choice","parentElement","lyricsAreaId","parseInt","getElementById","cardHead","querySelectorAll","forEach","songCard","lyricSearchRes","integerStringId","pTag","spinnerId","hidden","coloredWords","innerHTML","nestedSettingToast","wait","time","Promise","resolve","buttonPress","spinner","charAt","nounsRes","nounStringArray","newMongoModelUpdate","$push","blurbs","vibe","body","chosenSongArtist","dynamicQuery","update","getUserNameRes","newGlobalModel","userName","emit","onChange","placeholder","countLimit","rows","DashboardFeed","globalPosts","allGlobalPosts","setAllGlobalPosts","_id","date","createElement","TimeAgo","Dashboard","setGlobalPosts","on","allData","updateGlobalPosts","off","newData","order","sm","UserPosts","UserBlurbs","setUserBlurbs","reverse","ProfileDetails","loggedUser","setLoggedUser","catch","err","firstName","lastName","renderUserProfile","Profile","Signup","emailRef","useRef","passwordRef","passwordConfirmRef","userNameRef","firstNameRef","lastNameRef","setError","preventDefault","userObj","Alert","Form","onSubmit","Group","Label","Control","type","ref","required","Login","PrivateRoute","Component","component","rest","render","props","App","exact","path","style","minHeight","maxWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","URL","origin","addEventListener","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.75c30ce4.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nexport const auth = app.auth();\nexport default app;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\n// !there are two exports!\n// * this holds the firebase user authentication functions\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password, username) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  // * checking for change in user status\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setLoading(false);\n      setCurrentUser(user);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n  };\n\n  return (\n    <>\n      <AuthContext.Provider value={value}>\n        {!loading && children}\n      </AuthContext.Provider>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport \"./styles/Header.css\";\n\nexport default function Header() {\n  const { currentUser } = useAuth();\n  const [startLink, setStartLink] = useState(\"/signup\");\n\n  // jump pad for user to go to rest of application\n  useEffect(() => {\n    if (currentUser != null) {\n      setStartLink(\"/dashboard\");\n    } else {\n      setStartLink(\"/signup\");\n    }\n  }, [currentUser]);\n\n  return (\n    <>\n      <div className=\"headerContainer\">\n        <main>\n          <div className=\"code\">\n            <header className=\"content\">\n              <h1 className=\"title\">Vibee</h1>\n              <div className=\"text\">\n                Express yourself and find your vibes. Connect with other people\n                through music. Explore how other people are doing and catch a\n                vibe.\n              </div>\n            </header>\n            <footer className=\"footer\">\n              <Link className=\"ripple noselect\" to={startLink}>\n                Get Started\n              </Link>\n              <Link className=\"ripple noselect\" to=\"/about\">\n                Learn More\n              </Link>\n            </footer>\n\n            <div className=\"wave\"></div>\n            <div className=\"wave wave2\"></div>\n            <div className=\"wave wave3\"></div>\n          </div>\n        </main>\n        <img\n          className=\"vibeeLamp\"\n          src=\"https://i.imgur.com/iLVITNY.png\"\n          alt=\"vibeeLamp\"\n        />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport Header from \"../Header\";\n\nexport default function Homepage() {\n  return (\n    <>\n    <Header/>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button, Navbar, Nav } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport \"./styles/Navbar2.css\";\n\nexport default function NavMenu() {\n  const history = useHistory();\n  const { currentUser } = useAuth();\n  const { logout } = useAuth();\n\n  function handleSignupButton() {\n    try {\n      history.push(\"/signup\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function handleLoginButton() {\n    try {\n      history.push(\"/login\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleLogoutButton() {\n    try {\n      await logout();\n      history.push(\"/login\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <>\n      <Navbar\n        className=\"m-0 custom-nav\"\n        bg=\"dark\"\n        variant=\"dark\"\n        id=\"navbar\"\n        expand=\"md\"\n      >\n        <Navbar.Brand className=\"btn--outline\" as={Link} to=\"/\">\n          <i className=\"fab fa-forumbee\" />\n          <span className=\"logo\">Vibee</span>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link\n              className=\"mx-0 nav-link btn--outline\"\n              as={Link}\n              to={\"/dashboard\"}\n            >\n              Dashboard\n            </Nav.Link>\n            <Nav.Link\n              className=\"mx-0 nav-link btn--outline\"\n              as={Link}\n              to={\"/profile\"}\n            >\n              Profile\n            </Nav.Link>\n            {currentUser && (\n              <Nav.Link\n                className=\"mx-0 nav-link btn--outline\"\n                as={Link}\n                to={\"/collection\"}\n              >\n                My Collection\n              </Nav.Link>\n            )}\n            {!currentUser && (\n              <Nav.Link\n                className=\"btn--outline\"\n                as={Button}\n                onClick={handleSignupButton}\n              >\n                Sign Up\n              </Nav.Link>\n            )}\n            {!currentUser && (\n              <Nav.Link\n                className=\"btn--outline\"\n                as={Button}\n                onClick={handleLoginButton}\n              >\n                Log In <span> </span>\n                <svg\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-box-arrow-in-right\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0v-2z\"\n                  />\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"\n                  />\n                </svg>\n              </Nav.Link>\n            )}\n            {currentUser && (\n              <Nav.Link\n                className=\"btn--outline\"\n                as={Button}\n                onClick={handleLogoutButton}\n              >\n                Log Out<span> </span>\n                <svg\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-box-arrow-right\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\"\n                  />\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"\n                  />\n                </svg>\n              </Nav.Link>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}","import React from 'react';\nimport \"./styles/Steps.css\";\n\nexport default function Steps() {\n  var slides = document.getElementsByClassName(\"steps\");\n  // const next = document.querySelector(\"#next\");\n  // const prev = document.querySelector(\"#prev\");\n  // const auto = false;\n  // const intervalTime = 5000;\n  // let slideInterval;\n\n  const nextSlide = () => {\n\n    var current = document.querySelector(\".step1\");\n    current.classList.remove(\"step1\");\n\n    if(current.nextElementSibling) {\n      current.nextElementSibling.classList.add(\"step1\");\n    } else {\n      slides[0].classList.add(\"step1\");\n    }\n    setTimeout(() => current.classList.remove(\"step1\"));\n  }\n  \n  const prevSlide = () => {\n    var current = document.querySelector(\".step1\");\n    current.classList.remove(\"step1\");\n\n    if(current.previousElementSibling) {\n      current.previousElementSibling.classList.add(\"step1\");\n    } else {\n      slides[slides.length - 1].classList.add(\"step1\");\n    }\n    setTimeout(() => current.classList.remove(\"step1\"));\n  }\n\n//  if(auto) {\n//     clearInterval(slideInterval);\n//     slideInterval = setInterval(nextSlide, intervalTime);\n//   }\n return (\n   <div className=\"stepsContainer\"> \n    <div className=\"imgCarousel\">\n      <div className=\"steps step6\">\n       <div className=\"textContent\">\n         <h1>\n           Step 6\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n      <div className=\"steps step1\">\n       <div className=\"textContent\">\n         <h1>\n           Step 1\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n      <div className=\"steps step2\">\n       <div className=\"textContent\">\n         <h1>\n           Step 2\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n      <div className=\"steps step3\">\n       <div className=\"textContent\">\n         <h1>\n           Step 3\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n      <div className=\"steps step4\">\n       <div className=\"textContent\">\n         <h1>\n           Step 4\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n      <div className=\"steps step5\">\n       <div className=\"textContent\">\n         <h1>\n           Step 5\n         </h1>\n         <p>The first thing that you have to do is read this!</p>\n       </div>\n       </div>\n    </div>\n    <div className=\"buttons\">\n      <div id=\"prev\" onClick={prevSlide} ><svg width=\"50px\" height=\"50px\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-double-left\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fillRule=\"evenodd\" d=\"M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n  <path fillRule=\"evenodd\" d=\"M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n</svg></div>\n      <div id=\"next\" onClick={nextSlide} ><svg width=\"50px\" height=\"50px\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-double-right\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fillRule=\"evenodd\" d=\"M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z\"/>\n  <path fillRule=\"evenodd\" d=\"M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z\"/>\n</svg></div>\n    </div>\n  </div>\n )\n}\n","import React from 'react';\nimport Navbar from \"../Navbar\";\nimport Steps from \"../Steps\";\n\nexport default function About() {\n return (\n  <>\n    <Navbar />\n    <Steps/>\n  </>\n )\n}\n","import axios from \"axios\";\n\n// calls to Genius API, Wordnik API, and user database(eventually)\nexport default {\n    // getSongsPool takes in an array of strings\n    getSongsPool: function(lyricSnippet) {\n        return axios.get(\"/api/songs/\" + lyricSnippet);\n    },\n    getAllUsers: function() {\n        return axios.get(\"/api/users\");\n    },\n    getCurrentUser: function(email) {\n        return axios.get(\"/api/users/\" + email)\n    },\n    // getNouns takes in a string\n    getNouns: function(words) {\n        return axios.get(\"/api/nouns/\" + words);\n    },\n    postNewUser: function(user) {\n        return axios.post(\"/api/newUser\", user);\n    },\n    postBlurb: function(blurb) {\n        return axios.post(\"/api/postBlurb\", blurb);\n    },\n    postGlobalBlurb: function(blurb) {\n        return axios.post(\"/api/postGlobal\", blurb);\n    },\n    getAllGlobalPosts: function() {\n        return axios.get(\"/api/globalPosts\");\n    },\n    getUserPosts: function(email) {\n        return axios.get(\"/api/blurbs/\" + email);\n    },\n    getLyrics: function(cardID) {\n        return axios.get(\"/api/lyrics/\" + cardID);\n    }\n};\n","import React, {useEffect, useState} from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Navbar from \"../Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport API from \"../../utils/API\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport \"../styles/SongCardContainer.css\";\nimport \"../styles/Collection.css\";\n\nimport { useAuth } from '../../contexts/AuthContext';\n\n\nexport default function Collection() {\n\n const { currentUser } = useAuth();\n\n const [UserCollection, setUserCollection] = useState([]);\n\n\n const uniqByKeepLast = (data, key) => {\n   return [\n      ...new Map(\n        data.map( x => [key(x), x])\n      ).values()\n   ]\n }\n \n\n useEffect(() => {\n  // looks for the user based on their email,\n  // as of right now the email is hardcoded in\n  if(currentUser){\n    API.getUserPosts(currentUser.email).then( res => {\n   // ! THIS SHOULD FINISH THE CHECK FOR \"THIS USER HAS NO POSTS\" CASE\n   // if(res.data.blurbs === null){\n   //    return;\n   // }\n   const removedDups = uniqByKeepLast(res.data.songCollection, it => it.songId);\n   setUserCollection(removedDups);\n   console.log(removedDups); \n    });\n  }\n  \n\n}, [currentUser]);\n\n  return (\n    <>\n      <Navbar />\n         <Container fluid>\n                <Jumbotron id=\"collectionsJumbotron\" fluid>\n                    <h1 className=\"text-center\">Songs And Lyrics</h1>\n                </Jumbotron> \n            </Container>\n        \n          <Container className=\"mt-2\" fluid>\n           <Row noGutters={true}>\n          {\n           UserCollection.map(collection => {\n            return <Col xs={6} md={4} lg={3} xl={3} key={collection.songId}>\n            <Accordion className=\"rounded bottom MarginFix px-sm-3\" >\n            <Card className=\"cardBorder collectionCards\">\n                <Accordion.Toggle as={Card.Header}  className=\"card-selector\" eventKey=\"0\">\n                    <img src={collection.albumThumbnail} alt=\"albumThumbnail\" height=\"100px\" width=\"100px\"/>   \n                    <h4 className=\"songTitle\">\n                        {collection.songArtistAlbum}\n                    </h4>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"0\">\n                <Card.Body className=\"cardBody collectionCardBody\"> \n                 <h4>\n                  Lyrics\n                 </h4>\n                 <p className=\"songLyrics reducePadding\">\n                 \n                 {collection.lyrics}\n                    </p></Card.Body>\n                </Accordion.Collapse>\n            </Card>\n            </Accordion>\n            </Col>\n         })\n          }\n          </Row>\n       </Container>\n    </>\n  );\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\n// button group that is adjacent to drop down chooser\nexport default function ButtonGroup({handleButtonClick, isThinking}) {\n  return (\n    <>\n      <Col xs={{span: 4}}>\n        <Button onClick={!isThinking ? handleButtonClick : null} \n        disabled={isThinking} \n        className=\"p-2 px-md-3\" \n        size=\"sm\" \n        variant=\"warning\">\n          {isThinking ? <div><Spinner\n                          as=\"span\"\n                          animation=\"grow\"\n                          size=\"sm\"\n                          role=\"status\"\n                          aria-hidden=\"true\"\n                          /> Thinking...</div> : \"Analyze\"}\n        </Button>\n      </Col>\n      <Col xs={{span: 4}}>\n          <Button onClick={handleButtonClick} \n          className=\"py-2 px-3 px-md-4\"\n          size=\"sm\" \n          variant=\"warning\">Post</Button>\n      </Col>\n    </>\n  )\n}\n","const Moods = [\n  \"Lulz 🤣\",\n  \"Down 😢\",\n  \"Wavy 🏄‍♂️\",\n  \"Funky 🕺\",\n  \"Clowny 🤡\",\n  \"Magical 🧙‍♂️\",\n  \"Clairvoyant 🔮\",\n  \"Slumpy 🦥\",\n  \"Lovey-Dovey 💛\",\n  \"Popping Off 🖕\",\n  \"On One 🤪\",\n  \"Dead 💀\",\n  \"Chillin' 🧊\",\n  \"Meh 😑\",\n  \"Feelin' Good 😎\",\n  \"Flirty 🙊\",\n  \"Hating 💩\",\n  \"Hopeful 💭\",\n  \"Lit 🔥\"\n];\n\nexport default Moods;","import React, { useState} from 'react';\nimport Col from 'react-bootstrap/Col';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Moods from './DropdownItems/Moods';\nimport Button from 'react-bootstrap/Button';\n\nexport default function DropdownMood({vibeCheck}) {\n\n  // initialize the title of our dropdown menu to 'Vibe'\n  const [titleMood, setTitleMood] = useState(\"Vibe\");\n\n  return (\n    <>\n    {/* add a KEY prop for each child in a list <li>\n        in this case, the 'list' <li> is the Dropdown.Item */}\n      <Col className=\"my-auto\">\n        <DropdownButton \n        size=\"sm\"\n        id=\"dropdown-item-button\" \n        drop=\"up\" \n        variant=\"warning\"\n        title={titleMood}>\n          {\n            Moods.map( elem => {\n              return <Dropdown.Item \n                        as=\"button\"\n                        key={elem} >\n                        <div onClick={ (e) => { \n                          vibeCheck(e.target.textContent)\n                          setTitleMood(e.target.textContent)}}>\n                          {elem}\n                        </div>\n                      </Dropdown.Item>\n            })\n          }\n        </DropdownButton>\n      </Col>\n    </>\n  )\n}\n","import React from 'react';\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport \"./styles/SongCardContainer.css\";\n//song element takes in prop from songCardContainer\n//BlurbInput => SongCardContainer => SongCard\n//songElement is one of three songs from \n//the array\nexport default function SongCard({songElement, handleSongSelect}) {\n    \n    return (\n        <div>\n             <Accordion className=\"rounded bottom MarginFix px-sm-3\">\n                    <Card className=\"cardBorder\">\n                        <Accordion.Toggle as={Card.Header} id={songElement.count} className=\"card-selector\" eventKey=\"0\" onClick={(e) => handleSongSelect(e, {\n                            songID: songElement.songObj.id,\n                            title: songElement.songObj.title,\n                            artist: songElement.songObj.artist.name,\n                            wholeObj: songElement.songObj\n                        })}>\n                            \n                                \n                                    <img src={songElement.songObj.thumbnail} className=\"album-thumbnail\" alt=\"albumThumbnail\" height=\"100px\" width=\"100px\"/>   \n                                \n                                \n                                    <p className=\"songTitle\">\n                                        {songElement.songObj.title} - {songElement.songObj.artist.name}\n                                    </p>\n                                \n                            \n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body> \n                                <Spinner animation=\"border\" variant=\"warning\" className=\"spinners mt-3\" id={songElement.count + 6} />\n                                <div className=\"songLyrics\" id={songElement.count+3}>                           \n                                {/* giving id and class to each spinner */}                               \n                                </div>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                    </Accordion>\n        </div>\n    )\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\";\nimport SongCard from \"./SongCard\";\nimport \"./styles/SongCardContainer.css\";\n\n//songpool takes in prop from BlurbInput\n//it contains the array of songs from \n//the Genius API call\nexport default function SongCardContainer({songPool, handleSongSelect}) {\n\n    return (\n        <Container>\n            {\n            songPool.map(song => {\n                return <Row key={song.songObj.id} >\n                            <Col xs=\"12\" lg={{span: 10, offset: 1}} className=\"songCardCol my-auto\">\n                                <SongCard songElement={song} handleSongSelect={handleSongSelect} />   \n                            </Col>\n                        </Row>\n            })  \n            } \n        </Container>  \n    )\n}","import React, { useEffect, useState } from 'react';\nimport Toast from 'react-bootstrap/Toast';\nimport Col from 'react-bootstrap/Col';\n\nexport default function PostToastError({ showToast }) {\n\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    setShow(showToast);\n  }, [showToast]);\n\n  return (\n    <>\n      <Col xs={12}\n      >\n          <Toast animation={true} className=\"mx-auto\" onClose={() => setShow(false)} show={show} delay={1500} autohide>\n            <Toast.Body className=\"alert-msg\">select a song and/or write your thoughts!</Toast.Body>\n          </Toast>\n      </Col>\n    </>\n  )\n}\n","import io from 'socket.io-client';\n\n// ! connects to home(root) route on whatever server it's on dynamically\nconst socket = io();\n\nexport default socket;","import React, {useState} from 'react';\nimport{ useHistory } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport TextareaCounter from 'react-textarea-counter';\nimport './styles/BlurbInput.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from './ButtonGroup';\nimport DropdownMood from './DropdownMood';\nimport API from '../utils/API';\nimport SongCardContainer from \"./SongCardContainer\";\nimport PostToastError from \"./PostToastError\";\n\nimport { useAuth } from '../contexts/AuthContext';\n\n// socket\nimport socket from \"../utils/socketTest\";\n\n// input group component that allows user input\nexport default function BlurbInput() {\n\n    // current state of the value in text area\n    // current states of all user inputs\n    const [currentVibe, setCurrentVibe] = useState(\"\");\n    const [TextAreaVal, setTextAreaVal] = useState(\"\");\n    const [SongPoolRes, setSongPoolRes] = useState([]);\n    const [selectedSong, setSelectedSong] = useState({\n        songID: -1,\n        songArtistAlbum: \"\",\n        lyrics: \"\",\n        albumThumbnail: \"\"\n    });\n    // button states\n    const [isThinking, setIsThinking] = useState(false);\n    const [showToast, setShowToast] = useState(false);\n    // ! super important!\n    const { currentUser } = useAuth();\n    // to link to another page use History\n    const history = useHistory();\n    \n    const searchedWords = (search) => {\n        console.log(search);\n        JSON.stringify(search);\n        let lyrics = search.split(\" \");\n        console.log(\"edited\");\n        console.log(lyrics);\n        lyrics.toString().toLowerCase();\n        console.log(\"again\");\n        console.log(lyrics);\n        let input = TextAreaVal;\n        input.toString().toLowerCase();\n        let matches = input.split(\" \");\n        console.log(matches);\n        let formattedWords = lyrics.map(word => {\n            if (matches.indexOf(word) !== -1) {\n                return `<span class=\"match\">` + word +`</span>`\n            } else {\n                return word;\n            }\n        })      \n        return formattedWords.join(\" \");\n    };\n\n    // should always take in an array of words ([geniusQueryArray]) or String\n    // whether they be from Wordnik API\n    // or REGEX FUNCTIONS, OR a combination of both\n    const handleGeniusCall = async (geniusQueryArray) => {\n        \n        let geniusRes;\n        try {\n            geniusRes = await API.getSongsPool(geniusQueryArray);\n        } catch (err) {\n            throw err;\n        }\n        // genius error handling for the case of:\n        // searching with an empty string, or null, or empty array\n        if(typeof geniusRes.data === \"string\"){\n            setIsThinking(false);\n            return;\n        }\n        // shuffle the song pool for fun!\n        console.log(geniusRes.data);\n        const addCountPool = [];\n        for (let i = 0; i < geniusRes.data.length; i++) {\n            addCountPool.push(\n                {\n                    count: i+1,\n                    songObj: geniusRes.data[i]\n                }\n            );\n            \n        }\n        // update song pool state\n        setSongPoolRes(addCountPool);\n        setIsThinking(false);\n    }\n\n    //  * LYRIC CHECK PREVENT\n    // CHECKS IF THIS SONG HAS RENDERED ITS LYRICS ALREADY\n    // selected element could be the card head or the title element\n    // since we can return them out of handling selectedSong....\n    // ...we need to setSelectedSong here too!\n    const lyricSearchPrevent = (cardOrTitle, choice) => {\n        // title case\n        if(cardOrTitle.parentElement.classList[0] === \"card-selector\") {\n            let lyricsAreaId = parseInt(cardOrTitle.parentElement.id) +3;\n            let lyricElement = document.getElementById(`${lyricsAreaId}`);\n            if(lyricElement.textContent === \"\"){ \n                // lyrics NOT been requested yet, do not prevent search\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: \"\",\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return false;\n            } else {\n                // lyrics have been requested, prevent search\n                // remember the lyrics\n                setSelectedSong({ \n                    ...selectedSong,\n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return true;\n            }\n        } else { // card head case\n            let lyricsAreaId = parseInt(cardOrTitle.id) +3;\n            let lyricElement = document.getElementById(`${lyricsAreaId}`);\n            if(lyricElement.textContent === \"\"){ \n                // lyrics have NOT been requested yet, do not prevent search\n                setSelectedSong({ \n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    lyrics: \"\",\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return false;\n            } else {\n                // lyrics have been requested, prevent search\n                setSelectedSong({\n                    ...selectedSong,\n                    songID: choice.songID,\n                    songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                    albumThumbnail: choice.wholeObj.thumbnail\n                });\n                return true;\n            }\n        }\n    }\n\n    // handles state of the selected song\n    const handleSongSelect = async (e, choice) => {\n        const cardHead = e.target;\n        // cardHead grabs the clicked card\n        // allSongCards grabs all cards\n        const allSongCards = document.querySelectorAll(\".card-selector, .songTitle\");\n        // go through each card and remove green-bg class\n        allSongCards.forEach( (songCard) =>  \n            songCard.classList.remove(\"green-bg\")\n        )\n        // here SET the green-bg on the selected card or BOTH parent and child\n        if( cardHead.parentElement.classList[0] === \"card-selector\"){\n            cardHead.parentElement.classList.add(\"green-bg\");\n        }\n        cardHead.classList.add(\"green-bg\");\n\n        // ! CHECK BEFORE FIRING API CALL\n        let shouldPrevent = lyricSearchPrevent(cardHead, choice);\n        if(shouldPrevent){\n            // leave the function\n            // prevents searching for lyrics\n            // if already done before\n            return;\n        }\n        let lyricSearchRes;\n        // checking for which element user clicked on\n        if(cardHead.parentElement.classList[0] === \"card-selector\" ){\n            // this was the child\n            try {\n                lyricSearchRes = await API.getLyrics(cardHead.parentElement.id);\n            } catch (error) {\n                throw error;\n            }\n            // update selected song state with lyrics as well\n            setSelectedSong({ \n                songID: choice.songID,\n                songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                lyrics: lyricSearchRes.data,\n                albumThumbnail: choice.wholeObj.thumbnail\n            });\n            // this section finds which song accordion to populate the lyrics with\n            // uses janky id selection that matches up with their parents 'hardcoded' id's\n            // ! id's come from songCard.js!\n            let integerStringId = parseInt(cardHead.parentElement.id);\n            integerStringId = integerStringId + 3;\n            let pTag = document.getElementById(`${integerStringId}`);\n            let spinnerId = integerStringId + 3;\n            let spinnerElem = document.getElementById(`${spinnerId}`);\n            spinnerElem.hidden = true;\n            let coloredWords = searchedWords(lyricSearchRes.data);\n            pTag.innerHTML = coloredWords;\n        } else { // this was the parent\n            try {\n                lyricSearchRes = await API.getLyrics(cardHead.id);\n            } catch (error) {\n                throw error;\n            }\n            setSelectedSong({ \n                songID: choice.songID,\n                songArtistAlbum: `${choice.title} - ${choice.artist}`,\n                lyrics: lyricSearchRes.data,\n                albumThumbnail: choice.wholeObj.thumbnail\n            });\n            let integerStringId = parseInt(cardHead.id);\n            integerStringId = integerStringId + 3;\n            let pTag = document.getElementById(`${integerStringId}`);\n            let spinnerId = integerStringId + 3;\n            let spinnerElem = document.getElementById(`${spinnerId}`);\n            spinnerElem.hidden = true;\n            let coloredWords = searchedWords(lyricSearchRes.data);\n            pTag.innerHTML = coloredWords;\n        }\n            \n\n    }\n\n    // * sets show toast state to false after toast animation ends\n    const nestedSettingToast = () => {\n        setShowToast(false);\n        return;\n    }\n\n    // prevents quick button pressing to match with toast animation length\n    let intervals = 0;\n    const wait = (time) =>\n        new Promise((resolve) => {\n            setTimeout(() => {\n                intervals += 1;\n                console.log(\"waiting...\");\n                resolve();\n            }, time);\n    });\n\n    // takes in both actions from the POST and ANALYZE buttons\n    const handleButtonClick = async (e) => {\n        const buttonPress = e.target.textContent;\n        // do not call the api on an empty string\n        if(TextAreaVal === \"\") {\n            setShowToast(true);\n            await wait(1500);\n            nestedSettingToast();\n            return;\n        }\n        // if we hit analyze, query genius API with\n        // extracted nouns from the text area\n        if(buttonPress === \"Analyze\"){\n            setIsThinking(true);\n\n            // before you execute!!!\n            // RESET THE LYRICS SECTION TO empty! ''\n            let lyricsClass = document.querySelectorAll(\".songLyrics\");\n            lyricsClass.forEach( (elem) => {\n                elem.textContent = \"\";\n            });\n            // show spinners again\n            let spinnersClass = document.querySelectorAll(\"spinners\");\n            spinnersClass.forEach( spinner => {\n                spinner.hidden = false;\n            });\n\n            // check for length of the textarea post\n            let count = 0;\n            for (let i = 0; i < TextAreaVal.length; i++) {\n                if(TextAreaVal.charAt(i) !== ''){\n                    count = count + 1;\n                }\n            }\n\n            // we have a short post, call genius with whole string post\n            if (count <= 40){\n                handleGeniusCall(TextAreaVal);\n               \n                // exit\n                return;\n            }\n            // if its longer, extract the nouns\n            let nounsRes;\n            try {\n                nounsRes = await API.getNouns(TextAreaVal);\n            } catch(err) {\n                throw err;\n            }\n            const nounStringArray = nounsRes.data;\n            \n            handleGeniusCall(nounStringArray);\n        } else { // we will submit the post!\n            if(TextAreaVal === \"\" || selectedSong.songArtistAlbum === \"\") {\n                setShowToast(true);\n                await wait(1500);\n                nestedSettingToast();\n                return;\n            }\n            const newMongoModelUpdate = {\n                $push: {\n                    blurbs: {\n                        vibe: currentVibe === \"\"?\"🤐\": currentVibe,\n                        body: TextAreaVal,\n                        chosenSongArtist: selectedSong.songArtistAlbum,\n                        thumbnail: selectedSong.albumThumbnail\n                    },\n                    songCollection: {\n                        songId: selectedSong.songID,\n                        songArtistAlbum: selectedSong.songArtistAlbum,\n                        lyrics: selectedSong.lyrics,\n                        albumThumbnail: selectedSong.albumThumbnail\n                    }\n                }\n            }\n            // add email to the update blurb array request\n            let dynamicQuery = {\n                email: currentUser.email,\n                update: newMongoModelUpdate\n            }\n            let getUserNameRes;\n            try {\n                if ( currentUser) {\n                    getUserNameRes = await API.getUserPosts(currentUser.email);\n                } else {\n                }\n            } catch (error) {\n                throw error;\n            }\n            const newGlobalModel = {\n                // write in data that matches our new model\n                userName: getUserNameRes.data.userName,\n                vibe: currentVibe === \"\"?\"🤐\": currentVibe,\n                body: TextAreaVal,\n                chosenSongArtist: selectedSong.songArtistAlbum,\n                thumbnail: selectedSong.albumThumbnail,\n            }\n            let postRes;\n            try {\n                postRes = await API.postBlurb(dynamicQuery);\n            } catch (error) {\n                throw error;\n            }\n            \n            try {\n            await API.postGlobalBlurb(newGlobalModel);\n            } catch (error) {\n                throw error;\n            }\n            // EMIT SOCKET EVENT THAT WE POSTED A NEW BLURB\n            socket.emit(\"new blurb post\", \"whoa! you heard me!\");\n            // go to profile component\n            history.push(\"/profile\");\n        }\n    }\n    //** This handles the dropdown menu not the state\n    const vibeCheck = (vibe) => {\n        setCurrentVibe(vibe);\n    }\n\n    return (\n    <>\n        <Container className=\"mt-3\">\n            <Row>\n                <Col>\n                <SongCardContainer songPool={SongPoolRes} handleSongSelect={handleSongSelect} />\n                </Col>\n            </Row>\n            <Row className=\"mt-1\">\n                    <Col xs={12} md={{span: 12, offset: 0}}>\n                        <TextareaCounter onChange={(e) => setTextAreaVal(e.target.value)} placeholder=\"What's on your mind? Vibe check?\" countLimit={140} rows={3} />\n                    </Col>\n            </Row>\n            <Row>\n                <PostToastError showToast={showToast} />\n            </Row>\n            <Row className=\"mt-2\">\n                <ButtonGroup isThinking={isThinking} handleButtonClick={handleButtonClick}/>\n                <DropdownMood vibeCheck={vibeCheck}/>\n            </Row>\n            </Container>\n        </>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport TimeAgo from 'react-timeago';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./styles/DashboardFeed.css\";\n\n// VERY SIMILAR TO USERPOSTS.JS\n// with a username display field in this one though\nexport default function DashboardFeed({globalPosts}) {\n  const [allGlobalPosts, setAllGlobalPosts] = useState([]);\n  \n  useEffect(() => {\n    setAllGlobalPosts(globalPosts);\n    // listen to changes in this prop\n  }, [globalPosts])\n\n  // date format translator\n  const handleDateFormat = (date) => {\n    let format = React.createElement(TimeAgo, {date: date});\n    return format;\n }\n\n  return (\n    <div className=\"mt-3\">\n      {\n        allGlobalPosts.map( blurb => {\n          return <Container className=\"postDivContainerBackground rounded mb-2 p-1\"  key={blurb._id}>\n          <Row>\n            {/* left column of post */}\n            <Col xs={3} className=\"my-auto\">\n              {/* thumbnail row */}\n                <Row>\n                  <Col>\n                    <img className=\"postSongImage\" \n                      //!!Need to change with the thumbnail from the users blurb\n                      src={blurb.thumbnail} \n                      height=\"65px\" \n                      width=\"65px\"\n                      alt=\"albumThumbnail\"\n                    />\n                  </Col>\n                </Row>\n                {/* song and artist row */}\n                <Row>\n                  <Col>\n                  <span className=\"postSongTitle-dash\">\n                    {blurb.chosenSongArtist}\n                  </span>\n                  </Col>\n                </Row>\n            </Col>\n            {/* right column holding username, post, time, and vibe */}\n            <Col xs={9}>\n              <Row>\n                {/* column for username */}\n                <Col>\n                  <p className=\"user-name\">@{blurb.userName}</p>\n                </Col>\n              </Row>\n              <Row className=\"blurb-row\">\n                <Col>\n                  <p className=\"postBlurb-dash\">\n                    {blurb.body}\n                  </p>\n                </Col>\n              </Row>\n              <Row className=\"time-vibe-row-dash\">\n                <Col xs={6} className=\"my-auto post-date-column\">\n                  <p className=\"postDate\">\n                    {handleDateFormat(blurb.time)}\n                  </p>\n                </Col>\n                <Col className=\"mr-3 mt-auto\">\n                  <p className=\"postVibeEmoji-dash\">Vibe: <span>\n                    {blurb.vibe}\n                  </span></p>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n           </Container>  \n         })\n      }\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\nimport \"../../App.css\";\nimport Navbar from \"../Navbar\";\nimport BlurbInput from \"../BlurbInput\";\nimport Container from \"react-bootstrap/Container\";\nimport DashboardFeed from \"../DashboardFeed\";\nimport socket from \"../../utils/socketTest\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport default function Dashboard() {\n  const [globalPosts, setGlobalPosts] = useState([]);\n  useEffect(() => {\n    // getting all users and their posts\n    API.getAllGlobalPosts().then((res) => {\n      setGlobalPosts(res.data);\n    });\n    // add SOCKET event listener upon mounting this component\n    socket.on(\"updating posts\", (allData) => {\n      updateGlobalPosts(allData);\n    });\n\n      return () => {\n        socket.off(\"updating posts\");\n      }\n    \n  }, []);\n\n  // external function helps updating State asynchronocity\n  const updateGlobalPosts = (newData) => {\n    setGlobalPosts(newData);\n  }\n  \n\n  return (\n    <div>\n      <Navbar />\n      <Container fluid>\n        <Row>\n          {/* feed column */}\n          <Col xs={{span: 12, offset: 0, order: 2}} \n              sm={{span: 10, offset: 1, order: 2}} \n              md={{span: 6, offset: 0, order: 1}}  \n              lg={{span: 6, offset: 0, order: 1}} \n              xl={{span: 5, offset: 1, order: 1}} className=\"global-feed mt-2 mt-sm-2 mt-md-3\">\n            <DashboardFeed  \n              globalPosts={globalPosts}\n            />\n          </Col>\n          {/* input column */}\n          <Col className=\"my-auto\" xs={{span:12 , offset: 0, order: 1}} \n          sm={{span: 10, offset: 1, order: 1}} \n          md={{span: 6, offset:0, order: 2}} \n          lg={{span: 6, offset:0, order: 1}}\n          xl={{span: 5, offset:0, order: 1}}>\n            <BlurbInput />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport TimeAgo from \"react-timeago\";\nimport Container from \"react-bootstrap/Container\";\nimport API from \"../utils/API\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./styles/UserPosts.css\";\n\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function UserPosts() {\n // ! super important!\n const { currentUser } = useAuth();\n const [UserBlurbs, setUserBlurbs] = useState([]);\n   useEffect(() => {\n  // looks for the user based on their email,\n  // as of right now the email is hardcoded in\n  if(currentUser){\n      API.getUserPosts(currentUser.email).then( res => {\n      // ! THIS SHOULD FINISH THE CHECK FOR \"THIS USER HAS NO POSTS\" CASE\n      // if(res.data.blurbs === null){\n      //    return;\n      // }\n      setUserBlurbs(res.data.blurbs);\n   });\n  }\n}, [currentUser]);\n\n// Changes the date to show how much time has passed from today \n// ex. 5 minutes ago. The package will change from hour to days \n//automatically if there is syntax issue the default can be \n//changed. \nconst handleDateFormat = (date) => {\n   let format = React.createElement(TimeAgo, {date: date});\n   return format;\n}\n return (\n     <div className=\"mt-2\">\n     {\n        //!! .reverse() returns a reference of userBlurbsArray \n      UserBlurbs.reverse().map(blurb => { \n      return <Container className=\"postDivContainerBackground rounded mb-2 p-2\"  key={blurb._id}>\n          <Row>\n            {/* left column of post */}\n            <Col xs={3} className=\"my-auto\">\n              {/* thumbnail row */}\n                <Row>\n                  <Col>\n                    <img alt=\"albumThumbnail\" className=\"postSongImage\" \n                        src={blurb.thumbnail} \n                        height=\"80px\" \n                        width=\"80px\"\n                     />\n                  </Col>\n                </Row>\n                {/* song and artist row */}\n                <Row>\n                  <Col>\n                  <span className=\"postSongTitle\">\n                    {blurb.chosenSongArtist}\n                  </span>\n                  </Col>\n                </Row>\n            </Col>\n            {/* right column holding username, post, time, and vibe */}\n            <Col xs={9}>\n              <Row>\n                <Col>\n                  <p className=\"postBlurb mt-2\">\n                    {blurb.body}\n                  </p>\n                </Col>\n              </Row>\n              <Row className=\"time-vibe-row\">\n                <Col className=\"post-date-column my-auto\">\n                  <p className=\"postDate\">\n                    {handleDateFormat(blurb.time)}\n                  </p>\n                </Col>\n                <Col className=\"mr-2 mt-auto\">\n                  <p className=\"postVibeEmoji\">Vibe: <span>\n                    {blurb.vibe}\n                  </span></p>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          </Container>\n      })\n     }\n     </div>    \n )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAuth } from \"../contexts/AuthContext\";\nimport API from '../utils/API';\nimport \"./styles/ProfileDetails.css\";\n\n\nexport default function ProfileDetails() {\n    const { currentUser } = useAuth()\n    const [loggedUser, setLoggedUser] = useState([]);\n\n    function renderUserProfile() {\n        if (currentUser) {\n            return (\n                <>\n                    <img src=\"https://i.imgur.com/2MNpqfV.png\" alt=\"Cartoon Goose\" className=\"profilePic\"/>\n                    <h1 id=\"displayName\">{loggedUser.firstName} {loggedUser.lastName}</h1>\n                    <h2 id=\"username\">@{loggedUser.userName}</h2>\n                    <p id=\"bio\">I can't wait to update my bio with something really interesting to say!</p>\n                </>\n            )\n        }\n    }\n\n    useEffect(() => {\n        if (currentUser) {\n            API.getCurrentUser(currentUser.email).then(res => {\n                setLoggedUser(res.data)\n                console.log(res.data)\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }, [currentUser]);\n\n\n    return (\n        <>\n            <Container className=\"userProfileContainer\">\n                {(currentUser) ? renderUserProfile() : <h1>No User Logged In</h1>}\n            </Container>\n        </>\n    )\n}\n","import React from \"react\";\nimport \"../../App.css\";\nimport Navbar from \"../Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport UserPosts from \"../UserPosts\";\nimport { Row, Col } from \"react-bootstrap\";\nimport ProfileDetails from \"../ProfileDetails\"\nimport '../styles/LandingSplash.css';\n\n\nexport default function Profile() {\n  return (\n    <div>\n      <Navbar />     \n      <Container fluid>\n        <Row>\n          <Col xs={{span: 12, offset: 0}}\n          sm={{span: 8, offset: 2}}\n          md={{span: 5, offset: 0}}\n          lg={{span: 3, offset: 1}}\n          xl={{span: 3, offset: 1}}\n          >\n            <ProfileDetails />\n          </Col>\n          <Col xs={{span: 12, offset: 0}}\n          sm={{span: 10, offset: 1}}\n          md={{span: 7, offset: 0}}\n          lg={{span: 7, offset: 0}}\n          xl={{span: 7, offset: 0}}\n          >\n            <UserPosts />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport API from '../utils/API';\nimport \"./styles/SignupLogin.css\";\n\nexport default function Signup() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  // adding userName ref, firstName, lastName\n  const userNameRef = useRef();\n  const firstNameRef = useRef();\n  const lastNameRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value, userNameRef.current.value);\n      let userObj = {\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        userName: userNameRef.current.value,\n        email: emailRef.current.value,\n        blurbs: [],\n        songCollection: []\n      };\n      let userObjRes;\n      try {\n        userObjRes = await API.postNewUser(userObj);\n        history.push(\"/dashboard\");\n      } catch (error) {\n        throw error;\n      }\n      //This will redirect to dashboard through \"/\" route\n      \n    } catch {\n      setError(\"Failed to create an account\");\n    }\n    setLoading(false);\n  }\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <Link to=\"/\">\n            <i className =\"far fa-times-circle\" />\n          </Link>\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"firstName\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control type=\"text\" ref={firstNameRef} required />\n            </Form.Group>\n            <Form.Group id=\"LastName\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control type=\"text\" ref={lastNameRef} required />\n            </Form.Group>\n            <Form.Group id=\"userName\">\n              <Form.Label>User Name</Form.Label>\n              <Form.Control type=\"text\" ref={userNameRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordConfirmRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100 submitButton\" type=\"submit\">\n              Sign Up\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2 switchLabel\">\n        Already have an account? <Link className=\"switchLink\" to=\"/login\">Log In</Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport \"./styles/SignupLogin.css\";\n\n// component using states to handle login\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/dashboard\");\n    } catch {\n      setError(\"Failed to log in\");\n    }\n\n    setLoading(false);\n  }\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <Link to=\"/\">\n            <i className =\"far fa-times-circle\" />\n          </Link>\n          <h2 className=\"text-center mb-4\">Log In</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100 submitButton\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2 switchLabel\">\n        Need an account? <Link className=\"switchLink\" to=\"/signup\">Sign Up</Link>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n// brackets are wrapper for current route\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return (currentUser != null) ? <Component {...props} /> : <Redirect to=\"/login\" />\n        // return true ? <Component {...props} /> : <Redirect to=\"/login\" />\n      }}\n    ></Route>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Homepage from \"./components/pages/Homepage\";\n// socket instance!\n// in its own component\n// import socket from \"./utils/socketTest\";\nimport About from \"./components/pages/About\";\nimport Collection from \"./components/pages/Collection\";\nimport Dashboard from \"./components/pages/Dashboard\";\nimport Profile from \"./components/pages/Profile\";\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport { Container } from \"react-bootstrap\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Router>\n          {/* AuthProvider surrounds all components\n          to provide access to firebase  */}\n          <AuthProvider>\n            <Switch>\n              {/* Private routes checks for 'logged in' status\n              and redirects users to login component */}\n              <Route exact path=\"/\" component={Homepage} />\n              <PrivateRoute path=\"/profile\" component={Profile} />\n              <PrivateRoute path=\"/collection\" component={Collection}/>\n              <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\n              <Route path=\"/about\" component={About} />              \n              <Container\n                className=\"d-flex align-items-center justify-content-center\"\n                style={{ minHeight: \"100vh\" }}\n              >\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n                  <Route path=\"/signup\" component={Signup} />\n                  <Route path=\"/login\" component={Login} />\n                </div>\n              </Container>\n            </Switch>\n          </AuthProvider>\n        </Router>\n    </div>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}